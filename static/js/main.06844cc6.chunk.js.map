{"version":3,"sources":["components/StateMap.jsx","syntheticmass_api.js","components/PatientViewer.jsx","components/PatientList.jsx","App.js","serviceWorker.js","index.js"],"names":["StateMap","props","history","useHistory","Map","center","zoom","style","height","width","TileLayer","attribution","url","GeoJSON","data","ma_geo","key","onEachFeature","feature","layer","cityName","properties","cs_name","bindTooltip","on","click","e","push","f","color","opacity","fillOpacity","fillColor","API_KEY","process","fetchJson","fetch","then","response","json","getBundle","priorResults","result","entry","total","length","link","next","find","l","relation","nextUrl","isMatchingReference","reference","resourceType","id","PatientViewer","setLoading","callback","useParams","useState","bundle","setBundle","isLoading","setIsLoading","useEffect","getPatientById","patientEverythingBundle","onDrop","files","reader","FileReader","readAsText","onload","JSON","parse","getRootProps","getInputProps","background","src","alt","allResources","map","resource","patient","r","getByType","type","filter","conditions","medications","observations","reports","forEach","res","o","includes","careplans","goals","cp","goal","cpg","g","procedures","encounters","allergies","immunizations","documents","rows","PatientList","city","patients","setPatients","count","getPatientsByCity","searchResultBundle","p","Fragment","to","name","family","given","join","renderPatients","App","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06844cc6.chunk.js","sourcesContent":["import React from 'react';\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\nimport { useHistory } from \"react-router-dom\";\n\nimport ma_geo from '../ma_geo.json';\n\nconst StateMap = (props) => {\n  const history = useHistory();\n  const onEachFeature = function(feature, layer) {\n    const props = feature.properties;\n    const cityName = props.cs_name;\n    layer.bindTooltip(`<b>${cityName}</b>`);\n    layer.on({\n        click: (e) =>  history.push(`/city/${cityName}`)\n    });\n  }\n\n  const position = [42, -71.7];\n\n  return (\n    <Map center={position} zoom={8} style={{ height: '500px', width: '800px' }}>\n      <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n        <GeoJSON \n          data={ma_geo}\n          key={'changeme'} // set a key to ensure the geojson gets re-rendered correctly when we switch values\n          onEachFeature={onEachFeature} \n          style={(f) => ({ color: '#ffffff', opacity: 0.8, fillOpacity: 0.75, fillColor: '#7f7fff' })}\n          />\n    </Map>\n  )\n};\n\nexport default StateMap;","export const API_KEY = process.env.REACT_APP_API_KEY;\n\nconst fetchJson = url => fetch(url).then(response => response.json());\n\nexport const getPatientsByCity = (city, count=10) => {\n  const url = `https://syntheticmass.mitre.org/v1/fhir/Patient?address-city:exact=${city}&_count=${count}&apikey=${API_KEY}`;\n  return fetchJson(url);\n};\n\nexport const getPatientById = (id) => {\n  const url = `https://syntheticmass.mitre.org/v1/fhir/Patient/${id}/$everything?apikey=${API_KEY}`;\n  return getBundle(url);\n};\n\nconst getBundle = (url, priorResults) => {\n  return fetchJson(url)\n    .then(result => {\n      if (priorResults) {\n        result.entry.push(...priorResults.entry);\n        result.total = result.entry.length;\n      }\n\n      if (!result.link) return result;\n\n      const next = result.link.find(l => l.relation === 'next');\n      if (!next || !next.url) return result;\n\n      const nextUrl = `${next.url}&apikey=${API_KEY}`;\n      return getBundle(nextUrl, result);\n    });\n};\n\n\n// TODO: untested\nexport const getNext = (searchResultBundle) => {\n  if (!searchResultBundle.link) return null;\n  const next = searchResultBundle.link.find(l => l.relation === 'next');\n  if (!next) return null;\n  const url = `${next.url}&apikey=${API_KEY}`\n  return fetchJson(url);\n}\n","import React, { useState, useEffect } from 'react';\nimport { \n  PatientVisualizer,\n  ConditionsVisualizer,\n  ObservationsVisualizer,\n  ReportsVisualizer,\n  MedicationsVisualizer,\n  AllergiesVisualizer,\n  CarePlansVisualizer,\n  ProceduresVisualizer,\n  EncountersVisualizer,\n  ImmunizationsVisualizer,\n  DocumentReferencesVisualizer\n} from 'fhir-visualizers';\nimport { useParams } from \"react-router-dom\";\n\nimport Dropzone from 'react-dropzone';\n\nimport { getPatientById } from '../syntheticmass_api';\n\nconst isMatchingReference = (entry, reference, resourceType) => {\n  return entry.id === reference\n    || ('urn:uuid:'+entry.id) === reference\n    || (resourceType+'/'+entry.id) === reference;\n}\n\nconst getDropzone = (setLoading, callback) => {\n  const onDrop = files => {\n      const reader = new FileReader();\n      reader.readAsText(files[0]);\n      setLoading(true);\n      reader.onload = () => {\n        if (reader.result) {\n          const json = JSON.parse(reader.result);\n          setLoading(false);\n          callback(json);\n        }\n      };\n    };\n\n  return  (\n    <Dropzone onDrop={onDrop}>\n      {({getRootProps, getInputProps}) => (\n        <section>\n          <div {...getRootProps(\n            { style: { height: '100vh', width: '100%', background: '#F0F8FF' } }\n            )}>\n            <input {...getInputProps()} />\n            <p>Drag n drop a FHIR JSON file here, or click to select a file</p>\n          </div>\n        </section>\n      )}\n    </Dropzone>\n    );\n}\n\nconst PatientViewer = (props) => {\n  const { id } = useParams();\n\n  const [bundle, setBundle] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (id) {\n      setIsLoading(true);\n      getPatientById(id)\n      .then(patientEverythingBundle => {\n        setBundle(patientEverythingBundle);\n        setIsLoading(false);\n      });\n    }\n  }, [id]);  \n\n  if (!id && !bundle) return getDropzone(setIsLoading, setBundle);\n\n  if (isLoading) return <img src=\"https://i.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.webp\" alt=\"loading...\" />;\n\n  const allResources = bundle.entry.map(e => e.resource);\n  const patient = allResources.find(r => r.resourceType === 'Patient');\n\n  const getByType = (type) => allResources.filter(r => r.resourceType === type);\n  const conditions = getByType('Condition');\n  const medications = getByType('MedicationRequest');\n  let observations = getByType('Observation');\n  const reports = getByType('DiagnosticReport');\n\n  reports.forEach(r => {\n    if (r.result) {\n      r.observations = r.result.map(res => observations.find(o => isMatchingReference(o, res.reference, 'Observation')));\n      observations = observations.filter(o => !r.observations.includes(o));\n    }\n    \n  });\n\n  const careplans = getByType('CarePlan');\n  let goals = getByType('Goal');\n  // note that the syntheticmass server doesn't currently return goals in Patient$everything\n\n  careplans.forEach(cp => {\n    if (cp.goal) {\n      cp.goals = cp.goal.map(cpg => goals.find(g => isMatchingReference(g, cpg.reference, 'Goal'))).filter(g => g);\n    }\n  });\n\n  const procedures = getByType('Procedure');\n  const encounters = getByType('Encounter');\n  const allergies = getByType('AllergyIntolerance');\n  const immunizations = getByType('Immunization');\n  const documents = getByType('DocumentReference');\n\n  return (\n      <div>\n        <PatientVisualizer patient={patient} />\n        <ConditionsVisualizer rows={conditions} />\n        <MedicationsVisualizer rows={medications} />\n        <ObservationsVisualizer rows={observations} />\n        <ReportsVisualizer rows={reports} />\n        <CarePlansVisualizer rows={careplans} />\n        <ProceduresVisualizer rows={procedures} />\n        <EncountersVisualizer rows={encounters} />\n        <AllergiesVisualizer rows={allergies} />\n        <ImmunizationsVisualizer rows={immunizations} />\n        <DocumentReferencesVisualizer rows={documents} />\n      </div>\n    );\n};\n\nexport default PatientViewer;","import React, { useState, useEffect } from 'react';\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { getPatientsByCity } from '../syntheticmass_api';\n\n\nconst PatientList = (props) => {\n  const { city } = useParams();  \n  const [patients, setPatients] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setPatients([]);\n    setIsLoading(true);\n    getPatientsByCity(city)\n      .then(searchResultBundle => {\n        setPatients(searchResultBundle.entry.map(e => e.resource));\n        setIsLoading(false);\n      });\n  }, [city])\n\n  const renderPatients = (patients) => {\n    return patients.map(p => (\n        <React.Fragment key={p.id}>\n        <dt><Link to={`/city/${city}/patient/${p.id}`}>{ p.name[0].family + ', ' + p.name[0].given.join(' ') } </Link></dt>\n        <dd></dd>\n        </React.Fragment>\n      ) );\n  }\n\n  return (\n    <div>\n    <h3> { city } </h3>\n    { isLoading ? \n      <img src=\"https://i.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.webp\" alt=\"loading...\" /> \n      :\n      <dl> { renderPatients(patients) } </dl> }\n     </div> );\n}\n\nexport default PatientList;","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport StateMap from './components/StateMap';\nimport PatientViewer from './components/PatientViewer';\nimport PatientList from './components/PatientList';\n\nexport default class App extends React.Component {\n\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route path={[\"/record_viewer\", \"/patient_viewer\"]}>\n            <PatientViewer />\n          </Route>\n          <Route path=\"/\">\n            <StateMap />\n            <Route path=\"/city/:city\">\n              <PatientList />\n              <Route path=\"/city/:city/patient/:id\">\n                <PatientViewer />\n              </Route>\n            </Route>\n          </Route>\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}